#!/bin/bash
GREEN="\033[1;32m"
CYAN="\033[1;36m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
RESET="\033[0m"

if [ $# -eq 1 ]; then
	context_names=("$1")
else
	context_names=$(kubectl config get-contexts -o=name | grep -v '^CURRENT')
fi

for context in $context_names; do
	echo -e "${CYAN}Fetching events for context: $context${RESET}"
	start_time=$(date +%s)

	events_output=$(COLUMNS=9999 timeout 5s kubectl --context="$context" get events --all-namespaces -o wide 2>&1)

	kubectl_exit_code=$?
	if [ $kubectl_exit_code -eq 124 ]; then
		echo -e "${RED}Command timed out or no recent events for context: $context${RESET}"
	elif [ $kubectl_exit_code -ne 0 ]; then
		echo -e "${RED}Error executing kubectl command for context: $context${RESET}"
	else
		end_time=$(date +%s)
		elapsed_time=$((end_time - start_time))
		echo -e "${GREEN}Command executed in ${elapsed_time} seconds.${RESET}"
		while IFS= read -r line; do
			color_code="$RESET"
			if [[ "$line" =~ Normal ]]; then
				color_code="$GREEN"
			elif [[ "$line" =~ Warning ]]; then
				color_code="$YELLOW"
			elif [[ "$line" =~ (Error|Failed|Killing) ]]; then
				color_code="$RED"
			fi

			if [[ "$line" == *"$context"* ]] || [[ "$line" == "Fetching"* ]]; then
				echo -e "${CYAN}$line${RESET}"
			elif [[ "$line" == "Command executed"* ]]; then
				echo "$line"
			else
				echo -e "${color_code}$line${RESET}"
			fi
		done <<<"$events_output"
		echo -e "-----------------------------------"
	fi
done
