#!/bin/bash

# Color codes
GREEN="\033[1;32m"
CYAN="\033[1;36m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
RESET="\033[0m"

current_time=$(date -u +%FT%TZ)

# List of context names
context_names=$(kubectl config get-contexts -o=name | grep -v '^CURRENT')

# Loop through context names
for context in $context_names; do
    echo -e "${CYAN}Fetching events for context: $context${RESET}"

    start_time=$(date +%s)

    events_output=$(timeout 5s kubectl --context="$context" get events --all-namespaces -o custom-columns="NAMESPACE:.metadata.namespace,TYPE:.type,MESSAGE:.message,LEVEL:.reason" 2>&1)
    
    kubectl_exit_code=$?
    
    if [ $kubectl_exit_code -eq 124 ]; then
        echo -e "${RED}Command timed out or no recent events for context: $context${RESET}"
    elif [ $kubectl_exit_code -ne 0 ]; then
        echo -e "${RED}Error executing kubectl command for context: $context${RESET}"
    else
        end_time=$(date +%s)
        elapsed_time=$((end_time - start_time))

        echo -e "${GREEN}Command executed in ${elapsed_time} seconds.${RESET}"

        # Print the events output with colorized sections
        while IFS= read -r line; do
            namespace=$(echo "$line" | awk '{print $1}')
            type=$(echo "$line" | awk '{print $2}')
            level=$(echo "$line" | awk '{print $NF}')

            color_code="$RESET"  # Default color reset code

            case "$type:$level" in
                Normal:*) color_code="$GREEN" ;;
                Warning:*) color_code="$YELLOW" ;;
                Error:*|Failed:*|Killing:*) color_code="$RED" ;;
            esac

            if [[ "$line" == *"$context"* ]]; then
                echo -e "${CYAN}$line${RESET}"
            elif [[ "$line" != *"Fetching events"* && "$line" != *"Command executed in"* ]]; then
                echo -e "$color_code$line$RESET"
            else
                echo "$line"
            fi
        done <<< "$events_output"

        echo -e "-----------------------------------"
    fi
done
